# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HQ8H8iUR4KYZuscLMvA97YXblXD2TWx5
"""

# model_training.py

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Bidirectional, LSTM, Dense, Dropout

def build_cnn_bilstm_model(input_shape):
    """
    Builds a CNN-BiLSTM model for stock price prediction.

    Args:
        input_shape (tuple): Shape of the input data (timesteps, features).

    Returns:
        tf.keras.Model: CNN-BiLSTM model.
    """
    print("Building CNN-BiLSTM model...")
    model = Sequential()

    # 1D Convolutional Layer
    model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=input_shape))
    model.add(MaxPooling1D(pool_size=2))

    # Bidirectional LSTM Layer
    model.add(Bidirectional(LSTM(50, return_sequences=True)))
    model.add(Dropout(0.2))

    # Fully Connected Layer
    model.add(Dense(1, activation='linear'))

    # Compile the Model
    model.compile(optimizer='adam', loss='mse', metrics=['mae'])

    print("CNN-BiLSTM model built!")
    return model

# Example usage
if __name__ == "__main__":
    # Define input shape (timesteps, features)
    input_shape = (60, 9)  # 60 timesteps, 9 features (Open, High, Low, Close, Volume, MA_10, MA_50, RSI, MACD)

    # Build the model
    model = build_cnn_bilstm_model(input_shape)
    model.summary()









