# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HQ8H8iUR4KYZuscLMvA97YXblXD2TWx5
"""

# evaluation.py

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error

def calculate_mape(y_true, y_pred):
    """
    Calculates Mean Absolute Percentage Error (MAPE).

    Args:
        y_true (np.array): Actual values.
        y_pred (np.array): Predicted values.

    Returns:
        float: MAPE value.
    """
    return mean_absolute_percentage_error(y_true, y_pred)

def calculate_rmse(y_true, y_pred):
    """
    Calculates Root Mean Squared Error (RMSE).

    Args:
        y_true (np.array): Actual values.
        y_pred (np.array): Predicted values.

    Returns:
        float: RMSE value.
    """
    return np.sqrt(mean_squared_error(y_true, y_pred))

def calculate_cumulative_returns(y_true, y_pred):
    """
    Calculates Cumulative Returns.

    Args:
        y_true (np.array): Actual values.
        y_pred (np.array): Predicted values.

    Returns:
        float: Cumulative Returns value.
    """
    return np.sum(y_pred - y_true) / np.sum(y_true)

def plot_predictions(dates, y_true, y_pred, title):
    """
    Plots actual vs predicted stock prices over time.

    Args:
        dates (pd.Series): Dates for the x-axis.
        y_true (np.array): Actual stock prices.
        y_pred (np.array): Predicted stock prices.
        title (str): Title of the plot.
    """
    plt.figure(figsize=(12, 6))
    plt.plot(dates, y_true, label='Actual Prices', color='blue')
    plt.plot(dates, y_pred, label='Predicted Prices', color='red', linestyle='--')
    plt.title(title)
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.grid(True)
    plt.show()

def plot_metrics(models, metrics):
    """
    Plots performance metrics (MAPE, RMSE, Cumulative Returns) for different models.

    Args:
        models (list): List of model names.
        metrics (dict): Dictionary of metrics for each model.
    """
    plt.figure(figsize=(10, 6))
    x = np.arange(len(models))
    width = 0.2

    plt.bar(x - width, metrics['MAPE'], width, label='MAPE (%)')
    plt.bar(x, metrics['RMSE'], width, label='RMSE')
    plt.bar(x + width, metrics['Cumulative Returns'], width, label='Cumulative Returns (%)')

    plt.xlabel('Models')
    plt.ylabel('Performance')
    plt.title('Model Performance Comparison')
    plt.xticks(x, models)
    plt.legend()
    plt.grid(True)
    plt.show()

# Example usage
if __name__ == "__main__":
    # Example data
    dates = pd.date_range(start='2023-01-01', periods=100, freq='D')  # Example dates
    y_true = np.array([100 + i for i in range(100)])  # Example actual prices
    y_pred = np.array([102 + 0.9 * i for i in range(100)])  # Example predicted prices

    # Calculate metrics
    mape = calculate_mape(y_true, y_pred)
    rmse = calculate_rmse(y_true, y_pred)
    cumulative_returns = calculate_cumulative_returns(y_true, y_pred)

    # Print results
    print(f"MAPE: {mape:.2f}%")
    print(f"RMSE: {rmse:.2f}")
    print(f"Cumulative Returns: {cumulative_returns:.2f}%")

    # Plot results
    plot_predictions(dates, y_true, y_pred, "Actual vs Predicted Stock Prices")

    # Plot performance metrics
    models = ['CNN-BiLSTM', 'MTST']
    metrics = {
        'MAPE': [1.5, 1.2],  # Example MAPE values
        'RMSE': [10.3, 9.8],  # Example RMSE values
        'Cumulative Returns': [5.0, 6.0]  # Example Cumulative Returns
    }
    plot_metrics(models, metrics)







