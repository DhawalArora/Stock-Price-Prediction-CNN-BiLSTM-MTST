# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HQ8H8iUR4KYZuscLMvA97YXblXD2TWx5
"""

# data_preprocessing.py

import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler

def download_data(ticker, start_date, end_date):
    """
    Downloads historical stock data from Yahoo Finance.

    Args:
        ticker (str): Stock ticker symbol (e.g., "TSLA").
        start_date (str): Start date in "YYYY-MM-DD" format.
        end_date (str): End date in "YYYY-MM-DD" format.

    Returns:
        pd.DataFrame: Historical stock data.
    """
    print(f"Downloading data for {ticker} from {start_date} to {end_date}...")
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

def clean_data(data):
    """
    Cleans the stock data by handling missing values and removing outliers.

    Args:
        data (pd.DataFrame): Raw stock data.

    Returns:
        pd.DataFrame: Cleaned stock data.
    """
    print("Cleaning data...")
    # Fill missing values using forward and backward fill
    data.fillna(method='ffill', inplace=True)
    data.fillna(method='bfill', inplace=True)
    return data

def add_technical_indicators(data):
    """
    Adds technical indicators like Moving Averages, RSI, and MACD to the data.

    Args:
        data (pd.DataFrame): Cleaned stock data.

    Returns:
        pd.DataFrame: Data with technical indicators.
    """
    print("Adding technical indicators...")
    # Moving Averages
    data['MA_10'] = data['Close'].rolling(window=10).mean()
    data['MA_50'] = data['Close'].rolling(window=50).mean()

    # Relative Strength Index (RSI)
    delta = data['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    data['RSI'] = 100 - (100 / (1 + gain / loss))

    # Moving Average Convergence Divergence (MACD)
    data['MACD'] = data['Close'].ewm(span=12, adjust=False).mean() - data['Close'].ewm(span=26, adjust=False).mean()

    return data

def normalize_data(data):
    """
    Normalizes the stock data using Min-Max scaling.

    Args:
        data (pd.DataFrame): Data with technical indicators.

    Returns:
        pd.DataFrame: Normalized stock data.
    """
    print("Normalizing data...")
    scaler = MinMaxScaler()
    data[['Open', 'High', 'Low', 'Close', 'Volume', 'MA_10', 'MA_50', 'RSI', 'MACD']] = scaler.fit_transform(
        data[['Open', 'High', 'Low', 'Close', 'Volume', 'MA_10', 'MA_50', 'RSI', 'MACD']]
    )
    return data

def preprocess_data(ticker, start_date, end_date):
    """
    Downloads, cleans, and preprocesses stock data.

    Args:
        ticker (str): Stock ticker symbol (e.g., "TSLA").
        start_date (str): Start date in "YYYY-MM-DD" format.
        end_date (str): End date in "YYYY-MM-DD" format.

    Returns:
        pd.DataFrame: Preprocessed stock data.
    """
    # Step 1: Download data
    data = download_data(ticker, start_date, end_date)

    # Step 2: Clean data
    data = clean_data(data)

    # Step 3: Add technical indicators
    data = add_technical_indicators(data)

    # Step 4: Normalize data
    data = normalize_data(data)

    print("Data preprocessing complete!")
    return data

# Example usage
if __name__ == "__main__":
    # Example: Download and preprocess Tesla stock data
    ticker = "TSLA"
    start_date = "2015-01-01"
    end_date = "2023-01-01"
    data = preprocess_data(ticker, start_date, end_date)
    print(data.head())













